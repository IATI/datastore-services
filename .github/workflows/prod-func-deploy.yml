name: Deploy_To_PROD_Function_On_Release

# Runs when a Release is published from GitHub UI
on:
  release:
    types: [published]

env:
  STAGE: prod # suffix to indicate environment stage
  NAME: func-datastore-services
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.' # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '14.x' # set this to the node version to use
  AZURE_CREDENTIALS: ${{ secrets.PROD_AZURE_CREDENTIALS }}
  PGDATABASE: ${{ secrets.PGDATABASE_PROD }}
  PGHOST: ${{ secrets.PGHOST_PROD }}
  PGUSER: ${{ secrets.PGUSER_PROD }}
  PGPASSWORD: ${{ secrets.PGPASSWORD_PROD }}
  PGPORT: ${{ secrets.PGPORT }}
  PGSSL: ${{ secrets.PGSSL }}
  SOLR_URL: ${{ secrets.PROD_SOLR_API_URL }}
  SOLR_USERNAME: ${{ secrets.PROD_SOLR_USER }}
  SOLR_PASSWORD: ${{secrets.PROD_SOLR_PASSWORD }}
  STORAGE_CONNECTION_STRING: ${{ secrets.PROD_STORAGE_CONNECTION_STRING }}
  DOWNLOAD_CONTAINER_NAME: ${{ secrets.PROD_DOWNLOAD_CONTAINER_NAME }}
  KV_URI: ${{ secrets.PROD_KV_URI }}
  API_KEY: ${{ secrets.PROD_VALIDATOR_SERVICES_KEY_VALUE }}

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v3

      - name: 'Setup Node ${{ env.NODE_VERSION }} Environment'
        uses: actions/setup-node@v3.2.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Resolve Project Dependencies Using Npm'
        shell: bash
        run: |
          npm i -g npm
          pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          npm set-script prepare ""
          npm install --production
          popd

      - name: 'Login via Azure CLI'
        uses: azure/login@v1.4.4
        with:
          creds: ${{ env.AZURE_CREDENTIALS }} # Service Principal credentials saved in GitHub Secrets

      - name: Set Env variables for connecting to Redis instance and storing api keys in key vault
        uses: Azure/appservice-settings@v1.1.1
        with:
          app-name: ${{env.NAME}}-${{env.STAGE}}
          app-settings-json: |
            [
                {
                    "name": "PGDATABASE",
                    "value": "${{ env.PGDATABASE }}",
                    "slotSetting": false
                },
                {
                    "name": "PGHOST",
                    "value": "${{ env.PGHOST }}",
                    "slotSetting": false
                },
                {
                    "name": "PGUSER",
                    "value": "${{ env.PGUSER }}",
                    "slotSetting": false
                },
                {
                    "name": "PGPASSWORD",
                    "value": "${{ env.PGPASSWORD }}",
                    "slotSetting": false
                },
                {
                    "name": "PGPORT",
                    "value": "${{ env.PGPORT }}",
                    "slotSetting": false
                },
                {
                    "name": "PGSSL",
                    "value": "${{ env.PGSSL }}",
                    "slotSetting": false
                },
                {
                    "name": "SOLR_URL",
                    "value": "${{ env.SOLR_URL }}",
                    "slotSetting": false
                },
                {
                    "name": "SOLR_USERNAME",
                    "value": "${{ env.SOLR_USERNAME }}",
                    "slotSetting": false
                },
                {
                    "name": "SOLR_PASSWORD",
                    "value": "${{ env.SOLR_PASSWORD }}",
                    "slotSetting": false
                },
                {
                    "name": "STORAGE_CONNECTION_STRING",
                    "value": "${{ env.STORAGE_CONNECTION_STRING }}",
                    "slotSetting": false
                },
                {
                    "name": "DOWNLOAD_CONTAINER_NAME",
                    "value": "${{ env.DOWNLOAD_CONTAINER_NAME }}",
                    "slotSetting": false
                },
                {
                    "name": "AzureWebJobsSecretStorageType",
                    "value": "keyvault",
                    "slotSetting": false
                },
                {
                    "name": "AzureWebJobsSecretStorageKeyVaultUri",
                    "value": "${{ env.KV_URI }}",
                    "slotSetting": false
                }
            ]

      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1.4.6
        with:
          app-name: ${{ env.NAME }}-${{ env.STAGE }}
          package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

  integration-test:
    needs: build-deploy
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v3

      - name: 'Install newman'
        run: |
          sudo npm i -g newman

      - name: 'Run integration tests'
        run: |
          newman run integration-tests/datastore-services-integration-tests.postman_collection.json \
            -e integration-tests/envs/func-datastore-services-prod.postman_environment.json \
            --env-var keyValue=$API_KEY \
            --delay-request 50
